name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Cache version - update this date to invalidate all caches
  # Can be overridden with repository variable CACHE_VERSION
  CACHE_VERSION: ${{ vars.CACHE_VERSION || '2025-10-14' }}
  # Coverage thresholds - can be overridden with repository variables:
  # - COVERAGE_OVERALL_THRESHOLD: minimum overall line coverage % (default: 90)
  # - COVERAGE_PER_FILE_THRESHOLD: minimum per-file line coverage % (default: 70)

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ env.CACHE_VERSION }}

      - name: Cargo build
        run: |
          cargo build --locked --all-targets

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck jq

      - name: Shellcheck
        run: |
          SCRIPTS=$(git ls-files '*.sh')
          if [ -n "$SCRIPTS" ]; then
            echo "Running shellcheck on shell scripts"
            echo "$SCRIPTS" | xargs shellcheck --severity=warning
          else
            echo "No shell scripts found"
          fi

      - name: Markdown linting
        run: |
          MD_FILES=$(git ls-files '*.md')
          if [ -n "$MD_FILES" ]; then
            echo "Checking markdown files with markdownlint"
            if [ -f .markdownlintrc ]; then
              echo "$MD_FILES" | xargs npx markdownlint-cli@0.45.0 --config .markdownlintrc
            else
              echo "$MD_FILES" | xargs npx markdownlint-cli@0.45.0
            fi
          else
            echo "No markdown files found"
          fi

      - name: Cargo clippy
        run: |
          cargo clippy --locked --all-targets -- -D warnings

      - name: Install cargo-llvm-cov
        run: |
          cargo install cargo-llvm-cov --locked

      - name: Cargo test with coverage
        run: |
          echo "Running tests with coverage"
          cargo llvm-cov --all-features --all-targets --lcov --output-path lcov.info

          if cargo metadata --no-deps --format-version 1 | jq -e '.packages[].targets[] | select(.kind[] == "lib")' >/dev/null 2>&1; then
            echo "Running doc tests"
            cargo test --all-features --doc
          fi

      - name: Check coverage thresholds
        env:
          COVERAGE_OVERALL_THRESHOLD: ${{ vars.COVERAGE_OVERALL_THRESHOLD || '90' }}
          COVERAGE_PER_FILE_THRESHOLD: ${{ vars.COVERAGE_PER_FILE_THRESHOLD || '70' }}
        run: |
          # Get coverage report
          cargo llvm-cov --all-features --all-targets --summary-only > coverage-summary.txt
          cat coverage-summary.txt

          # Extract overall line coverage percentage
          OVERALL_COVERAGE=$(grep '^TOTAL' coverage-summary.txt | awk '{print $10}' | sed 's/%//')
          echo "Overall coverage: ${OVERALL_COVERAGE}%"

          # Check overall threshold (default: 90%, configurable via COVERAGE_OVERALL_THRESHOLD)
          OVERALL_THRESHOLD=${COVERAGE_OVERALL_THRESHOLD}
          echo "Overall threshold: ${OVERALL_THRESHOLD}%"
          if awk -v cov="$OVERALL_COVERAGE" -v thresh="$OVERALL_THRESHOLD" 'BEGIN {exit !(cov < thresh)}'; then
            echo "ERROR: Overall coverage ${OVERALL_COVERAGE}% is below minimum ${OVERALL_THRESHOLD}%"
            exit 1
          fi

          # Check per-file threshold (default: 70%, configurable via COVERAGE_PER_FILE_THRESHOLD)
          PER_FILE_THRESHOLD=${COVERAGE_PER_FILE_THRESHOLD}
          echo "Per-file threshold: ${PER_FILE_THRESHOLD}%"
          LOW_COVERAGE_FILES=$(grep 'giv/src' coverage-summary.txt | grep -v '100.00%' | awk -v thresh="$PER_FILE_THRESHOLD" '{
            line_cov=$(NF-3)
            gsub(/%/, "", line_cov)
            if (line_cov != "-" && line_cov < thresh && line_cov != "" && line_cov ~ /^[0-9]+(\.[0-9]+)?$/) {
              print $1 ": " line_cov "%"
            }
          }')

          if [ -n "$LOW_COVERAGE_FILES" ]; then
            echo "ERROR: Files below ${PER_FILE_THRESHOLD}% coverage threshold:"
            echo "$LOW_COVERAGE_FILES"
            exit 1
          fi

          echo "âœ“ Coverage thresholds met: Overall ${OVERALL_COVERAGE}% (>= ${OVERALL_THRESHOLD}%), all files >= ${PER_FILE_THRESHOLD}%"

      - name: Clean cargo cache
        run: |
          cargo install cargo-cache --no-default-features --features ci-autoclean
          cargo-cache
